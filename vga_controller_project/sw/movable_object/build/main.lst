                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TF2
                                     13 	.globl _EXF2
                                     14 	.globl _RCLK
                                     15 	.globl _TCLK
                                     16 	.globl _EXEN2
                                     17 	.globl _TR2
                                     18 	.globl _C_T2
                                     19 	.globl _CP_RL2
                                     20 	.globl _T2CON_7
                                     21 	.globl _T2CON_6
                                     22 	.globl _T2CON_5
                                     23 	.globl _T2CON_4
                                     24 	.globl _T2CON_3
                                     25 	.globl _T2CON_2
                                     26 	.globl _T2CON_1
                                     27 	.globl _T2CON_0
                                     28 	.globl _PT2
                                     29 	.globl _ET2
                                     30 	.globl _CY
                                     31 	.globl _AC
                                     32 	.globl _F0
                                     33 	.globl _RS1
                                     34 	.globl _RS0
                                     35 	.globl _OV
                                     36 	.globl _F1
                                     37 	.globl _P
                                     38 	.globl _PS
                                     39 	.globl _PT1
                                     40 	.globl _PX1
                                     41 	.globl _PT0
                                     42 	.globl _PX0
                                     43 	.globl _RD
                                     44 	.globl _WR
                                     45 	.globl _T1
                                     46 	.globl _T0
                                     47 	.globl _INT1
                                     48 	.globl _INT0
                                     49 	.globl _TXD
                                     50 	.globl _RXD
                                     51 	.globl _P3_7
                                     52 	.globl _P3_6
                                     53 	.globl _P3_5
                                     54 	.globl _P3_4
                                     55 	.globl _P3_3
                                     56 	.globl _P3_2
                                     57 	.globl _P3_1
                                     58 	.globl _P3_0
                                     59 	.globl _EA
                                     60 	.globl _ES
                                     61 	.globl _ET1
                                     62 	.globl _EX1
                                     63 	.globl _ET0
                                     64 	.globl _EX0
                                     65 	.globl _P2_7
                                     66 	.globl _P2_6
                                     67 	.globl _P2_5
                                     68 	.globl _P2_4
                                     69 	.globl _P2_3
                                     70 	.globl _P2_2
                                     71 	.globl _P2_1
                                     72 	.globl _P2_0
                                     73 	.globl _SM0
                                     74 	.globl _SM1
                                     75 	.globl _SM2
                                     76 	.globl _REN
                                     77 	.globl _TB8
                                     78 	.globl _RB8
                                     79 	.globl _TI
                                     80 	.globl _RI
                                     81 	.globl _P1_7
                                     82 	.globl _P1_6
                                     83 	.globl _P1_5
                                     84 	.globl _P1_4
                                     85 	.globl _P1_3
                                     86 	.globl _P1_2
                                     87 	.globl _P1_1
                                     88 	.globl _P1_0
                                     89 	.globl _TF1
                                     90 	.globl _TR1
                                     91 	.globl _TF0
                                     92 	.globl _TR0
                                     93 	.globl _IE1
                                     94 	.globl _IT1
                                     95 	.globl _IE0
                                     96 	.globl _IT0
                                     97 	.globl _P0_7
                                     98 	.globl _P0_6
                                     99 	.globl _P0_5
                                    100 	.globl _P0_4
                                    101 	.globl _P0_3
                                    102 	.globl _P0_2
                                    103 	.globl _P0_1
                                    104 	.globl _P0_0
                                    105 	.globl _TH2
                                    106 	.globl _TL2
                                    107 	.globl _RCAP2H
                                    108 	.globl _RCAP2L
                                    109 	.globl _T2CON
                                    110 	.globl _B
                                    111 	.globl _ACC
                                    112 	.globl _PSW
                                    113 	.globl _IP
                                    114 	.globl _P3
                                    115 	.globl _IE
                                    116 	.globl _P2
                                    117 	.globl _SBUF
                                    118 	.globl _SCON
                                    119 	.globl _P1
                                    120 	.globl _TH1
                                    121 	.globl _TH0
                                    122 	.globl _TL1
                                    123 	.globl _TL0
                                    124 	.globl _TMOD
                                    125 	.globl _TCON
                                    126 	.globl _PCON
                                    127 	.globl _DPH
                                    128 	.globl _DPL
                                    129 	.globl _SP
                                    130 	.globl _P0
                                    131 	.globl _rising
                                    132 	.globl _falling
                                    133 	.globl _draw_PARM_2
                                    134 	.globl _v_y_2
                                    135 	.globl _v_x_2
                                    136 	.globl _v_y_1
                                    137 	.globl _v_x_1
                                    138 	.globl _pixel_y
                                    139 	.globl _pixel_x
                                    140 	.globl _position_index
                                    141 	.globl _input
                                    142 	.globl _tim0_flag
                                    143 	.globl _ext0_flag
                                    144 	.globl _External0_INIT
                                    145 	.globl _External0_ISR
                                    146 	.globl _TIM0_INIT
                                    147 	.globl _TIM0_ISR
                                    148 	.globl _set_xy
                                    149 	.globl _draw
                                    150 	.globl _move_with_buttons
                                    151 	.globl _algorithm_1
                                    152 	.globl _algorithm_2
                                    153 	.globl _algorithm_3
                                    154 ;--------------------------------------------------------
                                    155 ; special function registers
                                    156 ;--------------------------------------------------------
                                    157 	.area RSEG    (ABS,DATA)
      000000                        158 	.org 0x0000
                           000080   159 _P0	=	0x0080
                           000081   160 _SP	=	0x0081
                           000082   161 _DPL	=	0x0082
                           000083   162 _DPH	=	0x0083
                           000087   163 _PCON	=	0x0087
                           000088   164 _TCON	=	0x0088
                           000089   165 _TMOD	=	0x0089
                           00008A   166 _TL0	=	0x008a
                           00008B   167 _TL1	=	0x008b
                           00008C   168 _TH0	=	0x008c
                           00008D   169 _TH1	=	0x008d
                           000090   170 _P1	=	0x0090
                           000098   171 _SCON	=	0x0098
                           000099   172 _SBUF	=	0x0099
                           0000A0   173 _P2	=	0x00a0
                           0000A8   174 _IE	=	0x00a8
                           0000B0   175 _P3	=	0x00b0
                           0000B8   176 _IP	=	0x00b8
                           0000D0   177 _PSW	=	0x00d0
                           0000E0   178 _ACC	=	0x00e0
                           0000F0   179 _B	=	0x00f0
                           0000C8   180 _T2CON	=	0x00c8
                           0000CA   181 _RCAP2L	=	0x00ca
                           0000CB   182 _RCAP2H	=	0x00cb
                           0000CC   183 _TL2	=	0x00cc
                           0000CD   184 _TH2	=	0x00cd
                                    185 ;--------------------------------------------------------
                                    186 ; special function bits
                                    187 ;--------------------------------------------------------
                                    188 	.area RSEG    (ABS,DATA)
      000000                        189 	.org 0x0000
                           000080   190 _P0_0	=	0x0080
                           000081   191 _P0_1	=	0x0081
                           000082   192 _P0_2	=	0x0082
                           000083   193 _P0_3	=	0x0083
                           000084   194 _P0_4	=	0x0084
                           000085   195 _P0_5	=	0x0085
                           000086   196 _P0_6	=	0x0086
                           000087   197 _P0_7	=	0x0087
                           000088   198 _IT0	=	0x0088
                           000089   199 _IE0	=	0x0089
                           00008A   200 _IT1	=	0x008a
                           00008B   201 _IE1	=	0x008b
                           00008C   202 _TR0	=	0x008c
                           00008D   203 _TF0	=	0x008d
                           00008E   204 _TR1	=	0x008e
                           00008F   205 _TF1	=	0x008f
                           000090   206 _P1_0	=	0x0090
                           000091   207 _P1_1	=	0x0091
                           000092   208 _P1_2	=	0x0092
                           000093   209 _P1_3	=	0x0093
                           000094   210 _P1_4	=	0x0094
                           000095   211 _P1_5	=	0x0095
                           000096   212 _P1_6	=	0x0096
                           000097   213 _P1_7	=	0x0097
                           000098   214 _RI	=	0x0098
                           000099   215 _TI	=	0x0099
                           00009A   216 _RB8	=	0x009a
                           00009B   217 _TB8	=	0x009b
                           00009C   218 _REN	=	0x009c
                           00009D   219 _SM2	=	0x009d
                           00009E   220 _SM1	=	0x009e
                           00009F   221 _SM0	=	0x009f
                           0000A0   222 _P2_0	=	0x00a0
                           0000A1   223 _P2_1	=	0x00a1
                           0000A2   224 _P2_2	=	0x00a2
                           0000A3   225 _P2_3	=	0x00a3
                           0000A4   226 _P2_4	=	0x00a4
                           0000A5   227 _P2_5	=	0x00a5
                           0000A6   228 _P2_6	=	0x00a6
                           0000A7   229 _P2_7	=	0x00a7
                           0000A8   230 _EX0	=	0x00a8
                           0000A9   231 _ET0	=	0x00a9
                           0000AA   232 _EX1	=	0x00aa
                           0000AB   233 _ET1	=	0x00ab
                           0000AC   234 _ES	=	0x00ac
                           0000AF   235 _EA	=	0x00af
                           0000B0   236 _P3_0	=	0x00b0
                           0000B1   237 _P3_1	=	0x00b1
                           0000B2   238 _P3_2	=	0x00b2
                           0000B3   239 _P3_3	=	0x00b3
                           0000B4   240 _P3_4	=	0x00b4
                           0000B5   241 _P3_5	=	0x00b5
                           0000B6   242 _P3_6	=	0x00b6
                           0000B7   243 _P3_7	=	0x00b7
                           0000B0   244 _RXD	=	0x00b0
                           0000B1   245 _TXD	=	0x00b1
                           0000B2   246 _INT0	=	0x00b2
                           0000B3   247 _INT1	=	0x00b3
                           0000B4   248 _T0	=	0x00b4
                           0000B5   249 _T1	=	0x00b5
                           0000B6   250 _WR	=	0x00b6
                           0000B7   251 _RD	=	0x00b7
                           0000B8   252 _PX0	=	0x00b8
                           0000B9   253 _PT0	=	0x00b9
                           0000BA   254 _PX1	=	0x00ba
                           0000BB   255 _PT1	=	0x00bb
                           0000BC   256 _PS	=	0x00bc
                           0000D0   257 _P	=	0x00d0
                           0000D1   258 _F1	=	0x00d1
                           0000D2   259 _OV	=	0x00d2
                           0000D3   260 _RS0	=	0x00d3
                           0000D4   261 _RS1	=	0x00d4
                           0000D5   262 _F0	=	0x00d5
                           0000D6   263 _AC	=	0x00d6
                           0000D7   264 _CY	=	0x00d7
                           0000AD   265 _ET2	=	0x00ad
                           0000BD   266 _PT2	=	0x00bd
                           0000C8   267 _T2CON_0	=	0x00c8
                           0000C9   268 _T2CON_1	=	0x00c9
                           0000CA   269 _T2CON_2	=	0x00ca
                           0000CB   270 _T2CON_3	=	0x00cb
                           0000CC   271 _T2CON_4	=	0x00cc
                           0000CD   272 _T2CON_5	=	0x00cd
                           0000CE   273 _T2CON_6	=	0x00ce
                           0000CF   274 _T2CON_7	=	0x00cf
                           0000C8   275 _CP_RL2	=	0x00c8
                           0000C9   276 _C_T2	=	0x00c9
                           0000CA   277 _TR2	=	0x00ca
                           0000CB   278 _EXEN2	=	0x00cb
                           0000CC   279 _TCLK	=	0x00cc
                           0000CD   280 _RCLK	=	0x00cd
                           0000CE   281 _EXF2	=	0x00ce
                           0000CF   282 _TF2	=	0x00cf
                                    283 ;--------------------------------------------------------
                                    284 ; overlayable register banks
                                    285 ;--------------------------------------------------------
                                    286 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        287 	.ds 8
                                    288 ;--------------------------------------------------------
                                    289 ; internal ram data
                                    290 ;--------------------------------------------------------
                                    291 	.area DSEG    (DATA)
      000000                        292 _ext0_flag::
      000000                        293 	.ds 1
      000001                        294 _tim0_flag::
      000001                        295 	.ds 1
      000002                        296 _input::
      000002                        297 	.ds 1
      000003                        298 _position_index::
      000003                        299 	.ds 2
      000005                        300 _pixel_x::
      000005                        301 	.ds 2
      000007                        302 _pixel_y::
      000007                        303 	.ds 2
      000009                        304 _v_x_1::
      000009                        305 	.ds 1
      00000A                        306 _v_y_1::
      00000A                        307 	.ds 1
      00000B                        308 _v_x_2::
      00000B                        309 	.ds 1
      00000C                        310 _v_y_2::
      00000C                        311 	.ds 1
      00000D                        312 _TIM0_ISR_counter_1_29:
      00000D                        313 	.ds 2
      00000F                        314 _draw_PARM_2:
      00000F                        315 	.ds 2
      000011                        316 _draw_x_1_32:
      000011                        317 	.ds 2
      000013                        318 _falling::
      000013                        319 	.ds 1
      000014                        320 _rising::
      000014                        321 	.ds 1
                                    322 ;--------------------------------------------------------
                                    323 ; overlayable items in internal ram 
                                    324 ;--------------------------------------------------------
                                    325 ;--------------------------------------------------------
                                    326 ; Stack segment in internal ram 
                                    327 ;--------------------------------------------------------
                                    328 	.area	SSEG
      000000                        329 __start__stack:
      000000                        330 	.ds	1
                                    331 
                                    332 ;--------------------------------------------------------
                                    333 ; indirectly addressable internal ram data
                                    334 ;--------------------------------------------------------
                                    335 	.area ISEG    (DATA)
                                    336 ;--------------------------------------------------------
                                    337 ; absolute internal ram data
                                    338 ;--------------------------------------------------------
                                    339 	.area IABS    (ABS,DATA)
                                    340 	.area IABS    (ABS,DATA)
                                    341 ;--------------------------------------------------------
                                    342 ; bit data
                                    343 ;--------------------------------------------------------
                                    344 	.area BSEG    (BIT)
      000000                        345 _algorithm_3_sloc0_1_0:
      000000                        346 	.ds 1
      000001                        347 _algorithm_3_sloc1_1_0:
      000001                        348 	.ds 1
                                    349 ;--------------------------------------------------------
                                    350 ; paged external ram data
                                    351 ;--------------------------------------------------------
                                    352 	.area PSEG    (PAG,XDATA)
                                    353 ;--------------------------------------------------------
                                    354 ; external ram data
                                    355 ;--------------------------------------------------------
                                    356 	.area XSEG    (XDATA)
                                    357 ;--------------------------------------------------------
                                    358 ; absolute external ram data
                                    359 ;--------------------------------------------------------
                                    360 	.area XABS    (ABS,XDATA)
                                    361 ;--------------------------------------------------------
                                    362 ; external initialized ram data
                                    363 ;--------------------------------------------------------
                                    364 	.area XISEG   (XDATA)
                                    365 	.area HOME    (CODE)
                                    366 	.area GSINIT0 (CODE)
                                    367 	.area GSINIT1 (CODE)
                                    368 	.area GSINIT2 (CODE)
                                    369 	.area GSINIT3 (CODE)
                                    370 	.area GSINIT4 (CODE)
                                    371 	.area GSINIT5 (CODE)
                                    372 	.area GSINIT  (CODE)
                                    373 	.area GSFINAL (CODE)
                                    374 	.area CSEG    (CODE)
                                    375 ;--------------------------------------------------------
                                    376 ; interrupt vector 
                                    377 ;--------------------------------------------------------
                                    378 	.area HOME    (CODE)
      000000                        379 __interrupt_vect:
      000000 02r00r00         [24]  380 	ljmp	__sdcc_gsinit_startup
      000003 02r00r4A         [24]  381 	ljmp	_External0_ISR
      000006                        382 	.ds	5
      00000B 02r00r61         [24]  383 	ljmp	_TIM0_ISR
                                    384 ;--------------------------------------------------------
                                    385 ; global & static initialisations
                                    386 ;--------------------------------------------------------
                                    387 	.area HOME    (CODE)
                                    388 	.area GSINIT  (CODE)
                                    389 	.area GSFINAL (CODE)
                                    390 	.area GSINIT  (CODE)
                                    391 	.globl __sdcc_gsinit_startup
                                    392 	.globl __sdcc_program_startup
                                    393 	.globl __start__stack
                                    394 	.globl __mcs51_genXINIT
                                    395 	.globl __mcs51_genXRAMCLEAR
                                    396 	.globl __mcs51_genRAMCLEAR
                                    397 ;------------------------------------------------------------
                                    398 ;Allocation info for local variables in function 'TIM0_ISR'
                                    399 ;------------------------------------------------------------
                                    400 ;counter                   Allocated with name '_TIM0_ISR_counter_1_29'
                                    401 ;------------------------------------------------------------
                                    402 ;	../../sw/movable_object/src/main.c:117: static uint16_t counter = 0;
      000000 E4               [12]  403 	clr	a
      000001 F5*0D            [12]  404 	mov	_TIM0_ISR_counter_1_29,a
      000003 F5*0E            [12]  405 	mov	(_TIM0_ISR_counter_1_29 + 1),a
                                    406 ;	../../sw/movable_object/src/main.c:23: volatile uint8_t ext0_flag = 0;
      000005 75*00 00         [24]  407 	mov	_ext0_flag,#0x00
                                    408 ;	../../sw/movable_object/src/main.c:24: volatile uint8_t tim0_flag = 0;
      000008 75*01 00         [24]  409 	mov	_tim0_flag,#0x00
                                    410 ;	../../sw/movable_object/src/main.c:26: volatile uint8_t input = 0;
      00000B 75*02 00         [24]  411 	mov	_input,#0x00
                                    412 ;	../../sw/movable_object/src/main.c:28: volatile uint16_t position_index = 0;
      00000E E4               [12]  413 	clr	a
      00000F F5*03            [12]  414 	mov	_position_index,a
      000011 F5*04            [12]  415 	mov	(_position_index + 1),a
                                    416 ;	../../sw/movable_object/src/main.c:29: volatile uint16_t pixel_x = 100;
      000013 75*05 64         [24]  417 	mov	_pixel_x,#0x64
                                    418 ;	1-genFromRTrack replaced	mov	(_pixel_x + 1),#0x00
      000016 F5*06            [12]  419 	mov	(_pixel_x + 1),a
                                    420 ;	../../sw/movable_object/src/main.c:30: volatile uint16_t pixel_y = 100;
      000018 75*07 64         [24]  421 	mov	_pixel_y,#0x64
                                    422 ;	1-genFromRTrack replaced	mov	(_pixel_y + 1),#0x00
      00001B F5*08            [12]  423 	mov	(_pixel_y + 1),a
                                    424 ;	../../sw/movable_object/src/main.c:31: volatile int8_t v_x_1 = 1;
      00001D 75*09 01         [24]  425 	mov	_v_x_1,#0x01
                                    426 ;	../../sw/movable_object/src/main.c:32: volatile int8_t v_y_1 = 1;
      000020 75*0A 01         [24]  427 	mov	_v_y_1,#0x01
                                    428 ;	../../sw/movable_object/src/main.c:33: volatile int8_t v_x_2 = 0;
                                    429 ;	1-genFromRTrack replaced	mov	_v_x_2,#0x00
      000023 F5*0B            [12]  430 	mov	_v_x_2,a
                                    431 ;	../../sw/movable_object/src/main.c:34: volatile int8_t v_y_2 = 0;
                                    432 ;	1-genFromRTrack replaced	mov	_v_y_2,#0x00
      000025 F5*0C            [12]  433 	mov	_v_y_2,a
                                    434 ;	../../sw/movable_object/src/main.c:203: volatile uint8_t falling = 0;
                                    435 ;	1-genFromRTrack replaced	mov	_falling,#0x00
      000027 F5*13            [12]  436 	mov	_falling,a
                                    437 ;	../../sw/movable_object/src/main.c:204: volatile uint8_t rising = 0;
                                    438 ;	1-genFromRTrack replaced	mov	_rising,#0x00
      000029 F5*14            [12]  439 	mov	_rising,a
                                    440 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  441 	ljmp	__sdcc_program_startup
                                    442 ;--------------------------------------------------------
                                    443 ; Home
                                    444 ;--------------------------------------------------------
                                    445 	.area HOME    (CODE)
                                    446 	.area HOME    (CODE)
      00000E                        447 __sdcc_program_startup:
      00000E 02r00r00         [24]  448 	ljmp	_main
                                    449 ;	return from main will return to caller
                                    450 ;--------------------------------------------------------
                                    451 ; code
                                    452 ;--------------------------------------------------------
                                    453 	.area CSEG    (CODE)
                                    454 ;------------------------------------------------------------
                                    455 ;Allocation info for local variables in function 'main'
                                    456 ;------------------------------------------------------------
                                    457 ;	../../sw/movable_object/src/main.c:50: void main(void){
                                    458 ;	-----------------------------------------
                                    459 ;	 function main
                                    460 ;	-----------------------------------------
      000000                        461 _main:
                           000007   462 	ar7 = 0x07
                           000006   463 	ar6 = 0x06
                           000005   464 	ar5 = 0x05
                           000004   465 	ar4 = 0x04
                           000003   466 	ar3 = 0x03
                           000002   467 	ar2 = 0x02
                           000001   468 	ar1 = 0x01
                           000000   469 	ar0 = 0x00
                                    470 ;	../../sw/movable_object/src/main.c:52: External0_INIT();
      000000 12r00r43         [24]  471 	lcall	_External0_INIT
                                    472 ;	../../sw/movable_object/src/main.c:53: TIM0_INIT();
      000003 12r00r51         [24]  473 	lcall	_TIM0_INIT
                                    474 ;	../../sw/movable_object/src/main.c:55: while(1){
      000006                        475 00117$:
                                    476 ;	../../sw/movable_object/src/main.c:58: input = UP;
      000006 75*02 04         [24]  477 	mov	_input,#0x04
                                    478 ;	../../sw/movable_object/src/main.c:60: if(input == LEFT){
      000009 74 08            [12]  479 	mov	a,#0x08
      00000B B5*02 0D         [24]  480 	cjne	a,_input,00114$
                                    481 ;	../../sw/movable_object/src/main.c:61: if(tim0_flag == 1){
      00000E 74 01            [12]  482 	mov	a,#0x01
      000010 B5*01 F3         [24]  483 	cjne	a,_tim0_flag,00117$
                                    484 ;	../../sw/movable_object/src/main.c:62: tim0_flag = 0;
      000013 75*01 00         [24]  485 	mov	_tim0_flag,#0x00
                                    486 ;	../../sw/movable_object/src/main.c:63: algorithm_1();
      000016 12r01r78         [24]  487 	lcall	_algorithm_1
      000019 80 EB            [24]  488 	sjmp	00117$
      00001B                        489 00114$:
                                    490 ;	../../sw/movable_object/src/main.c:66: else if(input == UP){
      00001B 74 04            [12]  491 	mov	a,#0x04
      00001D B5*02 0D         [24]  492 	cjne	a,_input,00111$
                                    493 ;	../../sw/movable_object/src/main.c:67: if(tim0_flag == 1){
      000020 74 01            [12]  494 	mov	a,#0x01
      000022 B5*01 E1         [24]  495 	cjne	a,_tim0_flag,00117$
                                    496 ;	../../sw/movable_object/src/main.c:68: tim0_flag = 0;
      000025 75*01 00         [24]  497 	mov	_tim0_flag,#0x00
                                    498 ;	../../sw/movable_object/src/main.c:69: algorithm_2();
      000028 12r01rA2         [24]  499 	lcall	_algorithm_2
      00002B 80 D9            [24]  500 	sjmp	00117$
      00002D                        501 00111$:
                                    502 ;	../../sw/movable_object/src/main.c:72: else if(input == DOWN){
      00002D 74 02            [12]  503 	mov	a,#0x02
      00002F B5*02 0D         [24]  504 	cjne	a,_input,00108$
                                    505 ;	../../sw/movable_object/src/main.c:73: if(tim0_flag == 1){
      000032 74 01            [12]  506 	mov	a,#0x01
      000034 B5*01 CF         [24]  507 	cjne	a,_tim0_flag,00117$
                                    508 ;	../../sw/movable_object/src/main.c:74: tim0_flag = 0;
      000037 75*01 00         [24]  509 	mov	_tim0_flag,#0x00
                                    510 ;	../../sw/movable_object/src/main.c:75: algorithm_3();
      00003A 12r02r04         [24]  511 	lcall	_algorithm_3
      00003D 80 C7            [24]  512 	sjmp	00117$
      00003F                        513 00108$:
                                    514 ;	../../sw/movable_object/src/main.c:78: else if(input == RIGHT){
      00003F E5*02            [12]  515 	mov	a,_input
      000041 80 C3            [24]  516 	sjmp	00117$
                                    517 ;------------------------------------------------------------
                                    518 ;Allocation info for local variables in function 'External0_INIT'
                                    519 ;------------------------------------------------------------
                                    520 ;	../../sw/movable_object/src/main.c:86: void External0_INIT(){
                                    521 ;	-----------------------------------------
                                    522 ;	 function External0_INIT
                                    523 ;	-----------------------------------------
      000043                        524 _External0_INIT:
                                    525 ;	../../sw/movable_object/src/main.c:87: EA = 1;
      000043 D2 AF            [12]  526 	setb	_EA
                                    527 ;	../../sw/movable_object/src/main.c:88: EX0 = 1;
      000045 D2 A8            [12]  528 	setb	_EX0
                                    529 ;	../../sw/movable_object/src/main.c:89: IT0 = 1;
      000047 D2 88            [12]  530 	setb	_IT0
      000049 22               [24]  531 	ret
                                    532 ;------------------------------------------------------------
                                    533 ;Allocation info for local variables in function 'External0_ISR'
                                    534 ;------------------------------------------------------------
                                    535 ;	../../sw/movable_object/src/main.c:92: void External0_ISR() __interrupt(0) {
                                    536 ;	-----------------------------------------
                                    537 ;	 function External0_ISR
                                    538 ;	-----------------------------------------
      00004A                        539 _External0_ISR:
                                    540 ;	../../sw/movable_object/src/main.c:93: input = P3;
      00004A 85 B0*02         [24]  541 	mov	_input,_P3
                                    542 ;	../../sw/movable_object/src/main.c:94: ext0_flag = 1;
      00004D 75*00 01         [24]  543 	mov	_ext0_flag,#0x01
      000050 32               [24]  544 	reti
                                    545 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    546 ;	eliminated unneeded push/pop psw
                                    547 ;	eliminated unneeded push/pop dpl
                                    548 ;	eliminated unneeded push/pop dph
                                    549 ;	eliminated unneeded push/pop b
                                    550 ;	eliminated unneeded push/pop acc
                                    551 ;------------------------------------------------------------
                                    552 ;Allocation info for local variables in function 'TIM0_INIT'
                                    553 ;------------------------------------------------------------
                                    554 ;	../../sw/movable_object/src/main.c:97: void TIM0_INIT(){
                                    555 ;	-----------------------------------------
                                    556 ;	 function TIM0_INIT
                                    557 ;	-----------------------------------------
      000051                        558 _TIM0_INIT:
                                    559 ;	../../sw/movable_object/src/main.c:99: TMOD |= 0x01;   
      000051 43 89 01         [24]  560 	orl	_TMOD,#0x01
                                    561 ;	../../sw/movable_object/src/main.c:103: TH0 = 0xF7;     // Set the high byte of TH0
      000054 75 8C F7         [24]  562 	mov	_TH0,#0xf7
                                    563 ;	../../sw/movable_object/src/main.c:104: TL0 = 0xDC;     // Set the low byte of TL0
      000057 75 8A DC         [24]  564 	mov	_TL0,#0xdc
                                    565 ;	../../sw/movable_object/src/main.c:107: EA = 1;
      00005A D2 AF            [12]  566 	setb	_EA
                                    567 ;	../../sw/movable_object/src/main.c:110: ET0 = 1;
      00005C D2 A9            [12]  568 	setb	_ET0
                                    569 ;	../../sw/movable_object/src/main.c:113: TR0 = 1;
      00005E D2 8C            [12]  570 	setb	_TR0
      000060 22               [24]  571 	ret
                                    572 ;------------------------------------------------------------
                                    573 ;Allocation info for local variables in function 'TIM0_ISR'
                                    574 ;------------------------------------------------------------
                                    575 ;counter                   Allocated with name '_TIM0_ISR_counter_1_29'
                                    576 ;------------------------------------------------------------
                                    577 ;	../../sw/movable_object/src/main.c:116: void TIM0_ISR() __interrupt(1) {
                                    578 ;	-----------------------------------------
                                    579 ;	 function TIM0_ISR
                                    580 ;	-----------------------------------------
      000061                        581 _TIM0_ISR:
      000061 C0 E0            [24]  582 	push	acc
      000063 C0 D0            [24]  583 	push	psw
                                    584 ;	../../sw/movable_object/src/main.c:119: counter++;
      000065 05*0D            [12]  585 	inc	_TIM0_ISR_counter_1_29
      000067 E4               [12]  586 	clr	a
      000068 B5*0D 02         [24]  587 	cjne	a,_TIM0_ISR_counter_1_29,00108$
      00006B 05*0E            [12]  588 	inc	(_TIM0_ISR_counter_1_29 + 1)
      00006D                        589 00108$:
                                    590 ;	../../sw/movable_object/src/main.c:121: if(counter == TIM0_TIME_MS){
      00006D 74 0A            [12]  591 	mov	a,#0x0a
      00006F B5*0D 06         [24]  592 	cjne	a,_TIM0_ISR_counter_1_29,00109$
      000072 E4               [12]  593 	clr	a
      000073 B5*0E 02         [24]  594 	cjne	a,(_TIM0_ISR_counter_1_29 + 1),00109$
      000076 80 02            [24]  595 	sjmp	00110$
      000078                        596 00109$:
      000078 80 08            [24]  597 	sjmp	00102$
      00007A                        598 00110$:
                                    599 ;	../../sw/movable_object/src/main.c:122: counter = 0;
      00007A E4               [12]  600 	clr	a
      00007B F5*0D            [12]  601 	mov	_TIM0_ISR_counter_1_29,a
      00007D F5*0E            [12]  602 	mov	(_TIM0_ISR_counter_1_29 + 1),a
                                    603 ;	../../sw/movable_object/src/main.c:123: tim0_flag = 1;
      00007F 75*01 01         [24]  604 	mov	_tim0_flag,#0x01
      000082                        605 00102$:
                                    606 ;	../../sw/movable_object/src/main.c:126: TH0 = 0xF7;     // Set the high byte of TH0
      000082 75 8C F7         [24]  607 	mov	_TH0,#0xf7
                                    608 ;	../../sw/movable_object/src/main.c:127: TL0 = 0xDC;     // Set the low byte of TL0
      000085 75 8A DC         [24]  609 	mov	_TL0,#0xdc
      000088 D0 D0            [24]  610 	pop	psw
      00008A D0 E0            [24]  611 	pop	acc
      00008C 32               [24]  612 	reti
                                    613 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    614 ;	eliminated unneeded push/pop dpl
                                    615 ;	eliminated unneeded push/pop dph
                                    616 ;	eliminated unneeded push/pop b
                                    617 ;------------------------------------------------------------
                                    618 ;Allocation info for local variables in function 'set_xy'
                                    619 ;------------------------------------------------------------
                                    620 ;	../../sw/movable_object/src/main.c:130: void set_xy(){
                                    621 ;	-----------------------------------------
                                    622 ;	 function set_xy
                                    623 ;	-----------------------------------------
      00008D                        624 _set_xy:
                                    625 ;	../../sw/movable_object/src/main.c:131: P1 = pixel_x & 0xFF;
      00008D AE*05            [24]  626 	mov	r6,_pixel_x
      00008F E5*06            [12]  627 	mov	a,(_pixel_x + 1)
      000091 8E 90            [24]  628 	mov	_P1,r6
                                    629 ;	../../sw/movable_object/src/main.c:132: P2 = pixel_y & 0xFF;
      000093 AE*07            [24]  630 	mov	r6,_pixel_y
      000095 E5*08            [12]  631 	mov	a,(_pixel_y + 1)
      000097 8E A0            [24]  632 	mov	_P2,r6
                                    633 ;	../../sw/movable_object/src/main.c:133: P0 = (((pixel_x >> 8) & 0b00000011)) |
      000099 AF*06            [24]  634 	mov	r7,(_pixel_x + 1)
      00009B 53 07 03         [24]  635 	anl	ar7,#0x03
                                    636 ;	../../sw/movable_object/src/main.c:134: ((pixel_y >> 2) & 0b11000000);    
      00009E AD*07            [24]  637 	mov	r5,_pixel_y
      0000A0 E5*08            [12]  638 	mov	a,(_pixel_y + 1)
      0000A2 C3               [12]  639 	clr	c
      0000A3 13               [12]  640 	rrc	a
      0000A4 CD               [12]  641 	xch	a,r5
      0000A5 13               [12]  642 	rrc	a
      0000A6 CD               [12]  643 	xch	a,r5
      0000A7 C3               [12]  644 	clr	c
      0000A8 13               [12]  645 	rrc	a
      0000A9 CD               [12]  646 	xch	a,r5
      0000AA 13               [12]  647 	rrc	a
      0000AB CD               [12]  648 	xch	a,r5
      0000AC 53 05 C0         [24]  649 	anl	ar5,#0xc0
      0000AF 7E 00            [12]  650 	mov	r6,#0x00
      0000B1 EF               [12]  651 	mov	a,r7
      0000B2 33               [12]  652 	rlc	a
      0000B3 95 E0            [12]  653 	subb	a,acc
      0000B5 FC               [12]  654 	mov	r4,a
      0000B6 EF               [12]  655 	mov	a,r7
      0000B7 42 05            [12]  656 	orl	ar5,a
      0000B9 EC               [12]  657 	mov	a,r4
      0000BA 42 06            [12]  658 	orl	ar6,a
      0000BC 8D 80            [24]  659 	mov	_P0,r5
      0000BE 22               [24]  660 	ret
                                    661 ;------------------------------------------------------------
                                    662 ;Allocation info for local variables in function 'draw'
                                    663 ;------------------------------------------------------------
                                    664 ;y                         Allocated with name '_draw_PARM_2'
                                    665 ;x                         Allocated with name '_draw_x_1_32'
                                    666 ;------------------------------------------------------------
                                    667 ;	../../sw/movable_object/src/main.c:137: void draw(volatile uint16_t x, volatile uint16_t y){
                                    668 ;	-----------------------------------------
                                    669 ;	 function draw
                                    670 ;	-----------------------------------------
      0000BF                        671 _draw:
      0000BF 85 82*11         [24]  672 	mov	_draw_x_1_32,dpl
      0000C2 85 83*12         [24]  673 	mov	(_draw_x_1_32 + 1),dph
                                    674 ;	../../sw/movable_object/src/main.c:138: pixel_x = x;
      0000C5 85*11*05         [24]  675 	mov	_pixel_x,_draw_x_1_32
      0000C8 85*12*06         [24]  676 	mov	(_pixel_x + 1),(_draw_x_1_32 + 1)
                                    677 ;	../../sw/movable_object/src/main.c:139: pixel_y = y;
      0000CB 85*0F*07         [24]  678 	mov	_pixel_y,_draw_PARM_2
      0000CE 85*10*08         [24]  679 	mov	(_pixel_y + 1),(_draw_PARM_2 + 1)
                                    680 ;	../../sw/movable_object/src/main.c:140: set_xy();
      0000D1 02r00r8D         [24]  681 	ljmp	_set_xy
                                    682 ;------------------------------------------------------------
                                    683 ;Allocation info for local variables in function 'move_with_buttons'
                                    684 ;------------------------------------------------------------
                                    685 ;	../../sw/movable_object/src/main.c:143: void move_with_buttons(){
                                    686 ;	-----------------------------------------
                                    687 ;	 function move_with_buttons
                                    688 ;	-----------------------------------------
      0000D4                        689 _move_with_buttons:
                                    690 ;	../../sw/movable_object/src/main.c:144: if(input == LEFT){
      0000D4 74 08            [12]  691 	mov	a,#0x08
      0000D6 B5*02 22         [24]  692 	cjne	a,_input,00123$
                                    693 ;	../../sw/movable_object/src/main.c:145: if(pixel_x <= MOVE)
      0000D9 C3               [12]  694 	clr	c
      0000DA 74 20            [12]  695 	mov	a,#0x20
      0000DC 95*05            [12]  696 	subb	a,_pixel_x
      0000DE E4               [12]  697 	clr	a
      0000DF 95*06            [12]  698 	subb	a,(_pixel_x + 1)
      0000E1 40 09            [24]  699 	jc	00102$
                                    700 ;	../../sw/movable_object/src/main.c:146: pixel_x = x_min;
      0000E3 75*05 01         [24]  701 	mov	_pixel_x,#0x01
      0000E6 75*06 00         [24]  702 	mov	(_pixel_x + 1),#0x00
      0000E9 02r01r75         [24]  703 	ljmp	00124$
      0000EC                        704 00102$:
                                    705 ;	../../sw/movable_object/src/main.c:148: pixel_x -= MOVE;
      0000EC E5*05            [12]  706 	mov	a,_pixel_x
      0000EE 24 E0            [12]  707 	add	a,#0xe0
      0000F0 F5*05            [12]  708 	mov	_pixel_x,a
      0000F2 E5*06            [12]  709 	mov	a,(_pixel_x + 1)
      0000F4 34 FF            [12]  710 	addc	a,#0xff
      0000F6 F5*06            [12]  711 	mov	(_pixel_x + 1),a
      0000F8 02r01r75         [24]  712 	ljmp	00124$
      0000FB                        713 00123$:
                                    714 ;	../../sw/movable_object/src/main.c:150: else if(input == UP){
      0000FB 74 04            [12]  715 	mov	a,#0x04
      0000FD B5*02 1F         [24]  716 	cjne	a,_input,00120$
                                    717 ;	../../sw/movable_object/src/main.c:151: if(pixel_y <= MOVE)
      000100 C3               [12]  718 	clr	c
      000101 74 20            [12]  719 	mov	a,#0x20
      000103 95*07            [12]  720 	subb	a,_pixel_y
      000105 E4               [12]  721 	clr	a
      000106 95*08            [12]  722 	subb	a,(_pixel_y + 1)
      000108 40 07            [24]  723 	jc	00105$
                                    724 ;	../../sw/movable_object/src/main.c:152: pixel_y = y_min;
      00010A E4               [12]  725 	clr	a
      00010B F5*07            [12]  726 	mov	_pixel_y,a
      00010D F5*08            [12]  727 	mov	(_pixel_y + 1),a
      00010F 80 64            [24]  728 	sjmp	00124$
      000111                        729 00105$:
                                    730 ;	../../sw/movable_object/src/main.c:154: pixel_y -= MOVE;
      000111 E5*07            [12]  731 	mov	a,_pixel_y
      000113 24 E0            [12]  732 	add	a,#0xe0
      000115 F5*07            [12]  733 	mov	_pixel_y,a
      000117 E5*08            [12]  734 	mov	a,(_pixel_y + 1)
      000119 34 FF            [12]  735 	addc	a,#0xff
      00011B F5*08            [12]  736 	mov	(_pixel_y + 1),a
      00011D 80 56            [24]  737 	sjmp	00124$
      00011F                        738 00120$:
                                    739 ;	../../sw/movable_object/src/main.c:156: else if(input == DOWN){
      00011F 74 02            [12]  740 	mov	a,#0x02
      000121 B5*02 20         [24]  741 	cjne	a,_input,00117$
                                    742 ;	../../sw/movable_object/src/main.c:157: if(pixel_y >= (y_max - MOVE))
      000124 C3               [12]  743 	clr	c
      000125 E5*07            [12]  744 	mov	a,_pixel_y
      000127 94 5C            [12]  745 	subb	a,#0x5c
      000129 E5*08            [12]  746 	mov	a,(_pixel_y + 1)
      00012B 94 01            [12]  747 	subb	a,#0x01
      00012D 40 08            [24]  748 	jc	00108$
                                    749 ;	../../sw/movable_object/src/main.c:158: pixel_y = y_max;
      00012F 75*07 7C         [24]  750 	mov	_pixel_y,#0x7c
      000132 75*08 01         [24]  751 	mov	(_pixel_y + 1),#0x01
      000135 80 3E            [24]  752 	sjmp	00124$
      000137                        753 00108$:
                                    754 ;	../../sw/movable_object/src/main.c:160: pixel_y += MOVE;
      000137 74 20            [12]  755 	mov	a,#0x20
      000139 25*07            [12]  756 	add	a,_pixel_y
      00013B F5*07            [12]  757 	mov	_pixel_y,a
      00013D E4               [12]  758 	clr	a
      00013E 35*08            [12]  759 	addc	a,(_pixel_y + 1)
      000140 F5*08            [12]  760 	mov	(_pixel_y + 1),a
      000142 80 31            [24]  761 	sjmp	00124$
      000144                        762 00117$:
                                    763 ;	../../sw/movable_object/src/main.c:162: else if(input == RIGHT){
      000144 74 01            [12]  764 	mov	a,#0x01
      000146 B5*02 20         [24]  765 	cjne	a,_input,00114$
                                    766 ;	../../sw/movable_object/src/main.c:163: if(pixel_x >= (x_max - MOVE))
      000149 C3               [12]  767 	clr	c
      00014A E5*05            [12]  768 	mov	a,_pixel_x
      00014C 94 FC            [12]  769 	subb	a,#0xfc
      00014E E5*06            [12]  770 	mov	a,(_pixel_x + 1)
      000150 94 01            [12]  771 	subb	a,#0x01
      000152 40 08            [24]  772 	jc	00111$
                                    773 ;	../../sw/movable_object/src/main.c:164: pixel_x = x_max;
      000154 75*05 1C         [24]  774 	mov	_pixel_x,#0x1c
      000157 75*06 02         [24]  775 	mov	(_pixel_x + 1),#0x02
      00015A 80 19            [24]  776 	sjmp	00124$
      00015C                        777 00111$:
                                    778 ;	../../sw/movable_object/src/main.c:166: pixel_x += MOVE;
      00015C 74 20            [12]  779 	mov	a,#0x20
      00015E 25*05            [12]  780 	add	a,_pixel_x
      000160 F5*05            [12]  781 	mov	_pixel_x,a
      000162 E4               [12]  782 	clr	a
      000163 35*06            [12]  783 	addc	a,(_pixel_x + 1)
      000165 F5*06            [12]  784 	mov	(_pixel_x + 1),a
      000167 80 0C            [24]  785 	sjmp	00124$
      000169                        786 00114$:
                                    787 ;	../../sw/movable_object/src/main.c:169: pixel_x = 200;
      000169 75*05 C8         [24]  788 	mov	_pixel_x,#0xc8
      00016C 75*06 00         [24]  789 	mov	(_pixel_x + 1),#0x00
                                    790 ;	../../sw/movable_object/src/main.c:170: pixel_y = 200;
      00016F 75*07 C8         [24]  791 	mov	_pixel_y,#0xc8
      000172 75*08 00         [24]  792 	mov	(_pixel_y + 1),#0x00
      000175                        793 00124$:
                                    794 ;	../../sw/movable_object/src/main.c:173: set_xy();
      000175 02r00r8D         [24]  795 	ljmp	_set_xy
                                    796 ;------------------------------------------------------------
                                    797 ;Allocation info for local variables in function 'algorithm_1'
                                    798 ;------------------------------------------------------------
                                    799 ;	../../sw/movable_object/src/main.c:176: void algorithm_1(){
                                    800 ;	-----------------------------------------
                                    801 ;	 function algorithm_1
                                    802 ;	-----------------------------------------
      000178                        803 _algorithm_1:
                                    804 ;	../../sw/movable_object/src/main.c:177: position_index++;
      000178 74 01            [12]  805 	mov	a,#0x01
      00017A 25*03            [12]  806 	add	a,_position_index
      00017C F5*03            [12]  807 	mov	_position_index,a
      00017E E4               [12]  808 	clr	a
      00017F 35*04            [12]  809 	addc	a,(_position_index + 1)
      000181 F5*04            [12]  810 	mov	(_position_index + 1),a
                                    811 ;	../../sw/movable_object/src/main.c:178: if (position_index > 300)
      000183 C3               [12]  812 	clr	c
      000184 74 2C            [12]  813 	mov	a,#0x2c
      000186 95*03            [12]  814 	subb	a,_position_index
      000188 74 01            [12]  815 	mov	a,#0x01
      00018A 95*04            [12]  816 	subb	a,(_position_index + 1)
      00018C 50 05            [24]  817 	jnc	00102$
                                    818 ;	../../sw/movable_object/src/main.c:179: position_index = 0;
      00018E E4               [12]  819 	clr	a
      00018F F5*03            [12]  820 	mov	_position_index,a
      000191 F5*04            [12]  821 	mov	(_position_index + 1),a
      000193                        822 00102$:
                                    823 ;	../../sw/movable_object/src/main.c:181: pixel_x = position_index;
      000193 85*03*05         [24]  824 	mov	_pixel_x,_position_index
      000196 85*04*06         [24]  825 	mov	(_pixel_x + 1),(_position_index + 1)
                                    826 ;	../../sw/movable_object/src/main.c:182: pixel_y = position_index;
      000199 85*03*07         [24]  827 	mov	_pixel_y,_position_index
      00019C 85*04*08         [24]  828 	mov	(_pixel_y + 1),(_position_index + 1)
                                    829 ;	../../sw/movable_object/src/main.c:183: set_xy();
      00019F 02r00r8D         [24]  830 	ljmp	_set_xy
                                    831 ;------------------------------------------------------------
                                    832 ;Allocation info for local variables in function 'algorithm_2'
                                    833 ;------------------------------------------------------------
                                    834 ;	../../sw/movable_object/src/main.c:186: void algorithm_2(){
                                    835 ;	-----------------------------------------
                                    836 ;	 function algorithm_2
                                    837 ;	-----------------------------------------
      0001A2                        838 _algorithm_2:
                                    839 ;	../../sw/movable_object/src/main.c:188: if(pixel_x >= x_max)
      0001A2 C3               [12]  840 	clr	c
      0001A3 E5*05            [12]  841 	mov	a,_pixel_x
      0001A5 94 1C            [12]  842 	subb	a,#0x1c
      0001A7 E5*06            [12]  843 	mov	a,(_pixel_x + 1)
      0001A9 94 02            [12]  844 	subb	a,#0x02
                                    845 ;	../../sw/movable_object/src/main.c:189: v_x_1 *= -1;
      0001AB 40 05            [24]  846 	jc	00102$
      0001AD E4               [12]  847 	clr	a
      0001AE 95*09            [12]  848 	subb	a,_v_x_1
      0001B0 F5*09            [12]  849 	mov	_v_x_1,a
      0001B2                        850 00102$:
                                    851 ;	../../sw/movable_object/src/main.c:190: if(pixel_y >= y_max)
      0001B2 C3               [12]  852 	clr	c
      0001B3 E5*07            [12]  853 	mov	a,_pixel_y
      0001B5 94 7C            [12]  854 	subb	a,#0x7c
      0001B7 E5*08            [12]  855 	mov	a,(_pixel_y + 1)
      0001B9 94 01            [12]  856 	subb	a,#0x01
                                    857 ;	../../sw/movable_object/src/main.c:191: v_y_1 *= -1;
      0001BB 40 05            [24]  858 	jc	00104$
      0001BD E4               [12]  859 	clr	a
      0001BE 95*0A            [12]  860 	subb	a,_v_y_1
      0001C0 F5*0A            [12]  861 	mov	_v_y_1,a
      0001C2                        862 00104$:
                                    863 ;	../../sw/movable_object/src/main.c:192: if(pixel_x <= x_min)
      0001C2 C3               [12]  864 	clr	c
      0001C3 74 01            [12]  865 	mov	a,#0x01
      0001C5 95*05            [12]  866 	subb	a,_pixel_x
      0001C7 E4               [12]  867 	clr	a
      0001C8 95*06            [12]  868 	subb	a,(_pixel_x + 1)
                                    869 ;	../../sw/movable_object/src/main.c:193: v_x_1 *= -1;
      0001CA 40 05            [24]  870 	jc	00106$
      0001CC E4               [12]  871 	clr	a
      0001CD 95*09            [12]  872 	subb	a,_v_x_1
      0001CF F5*09            [12]  873 	mov	_v_x_1,a
      0001D1                        874 00106$:
                                    875 ;	../../sw/movable_object/src/main.c:194: if(pixel_y <= y_min)
      0001D1 E5*07            [12]  876 	mov	a,_pixel_y
      0001D3 45*08            [12]  877 	orl	a,(_pixel_y + 1)
      0001D5 70 06            [24]  878 	jnz	00108$
                                    879 ;	../../sw/movable_object/src/main.c:195: v_y_1 *= -1;
      0001D7 C3               [12]  880 	clr	c
      0001D8 E4               [12]  881 	clr	a
      0001D9 95*0A            [12]  882 	subb	a,_v_y_1
      0001DB F5*0A            [12]  883 	mov	_v_y_1,a
      0001DD                        884 00108$:
                                    885 ;	../../sw/movable_object/src/main.c:197: pixel_x += v_x_1;
      0001DD AE*09            [24]  886 	mov	r6,_v_x_1
      0001DF E5*09            [12]  887 	mov	a,_v_x_1
      0001E1 33               [12]  888 	rlc	a
      0001E2 95 E0            [12]  889 	subb	a,acc
      0001E4 FF               [12]  890 	mov	r7,a
      0001E5 EE               [12]  891 	mov	a,r6
      0001E6 25*05            [12]  892 	add	a,_pixel_x
      0001E8 F5*05            [12]  893 	mov	_pixel_x,a
      0001EA EF               [12]  894 	mov	a,r7
      0001EB 35*06            [12]  895 	addc	a,(_pixel_x + 1)
      0001ED F5*06            [12]  896 	mov	(_pixel_x + 1),a
                                    897 ;	../../sw/movable_object/src/main.c:198: pixel_y += v_y_1;
      0001EF AE*0A            [24]  898 	mov	r6,_v_y_1
      0001F1 E5*0A            [12]  899 	mov	a,_v_y_1
      0001F3 33               [12]  900 	rlc	a
      0001F4 95 E0            [12]  901 	subb	a,acc
      0001F6 FF               [12]  902 	mov	r7,a
      0001F7 EE               [12]  903 	mov	a,r6
      0001F8 25*07            [12]  904 	add	a,_pixel_y
      0001FA F5*07            [12]  905 	mov	_pixel_y,a
      0001FC EF               [12]  906 	mov	a,r7
      0001FD 35*08            [12]  907 	addc	a,(_pixel_y + 1)
      0001FF F5*08            [12]  908 	mov	(_pixel_y + 1),a
                                    909 ;	../../sw/movable_object/src/main.c:200: set_xy();
      000201 02r00r8D         [24]  910 	ljmp	_set_xy
                                    911 ;------------------------------------------------------------
                                    912 ;Allocation info for local variables in function 'algorithm_3'
                                    913 ;------------------------------------------------------------
                                    914 ;	../../sw/movable_object/src/main.c:206: void algorithm_3(){
                                    915 ;	-----------------------------------------
                                    916 ;	 function algorithm_3
                                    917 ;	-----------------------------------------
      000204                        918 _algorithm_3:
                                    919 ;	../../sw/movable_object/src/main.c:208: if( (v_x_2 == 0) & (v_y_2 == 0) ){
      000204 E5*0B            [12]  920 	mov	a,_v_x_2
      000206 B4 01 00         [24]  921 	cjne	a,#0x01,00134$
      000209                        922 00134$:
      000209 92*00            [24]  923 	mov	_algorithm_3_sloc0_1_0,c
      00020B E5*0C            [12]  924 	mov	a,_v_y_2
      00020D B4 01 00         [24]  925 	cjne	a,#0x01,00135$
      000210                        926 00135$:
      000210 92*01            [24]  927 	mov	_algorithm_3_sloc1_1_0,c
      000212 A2*00            [12]  928 	mov	c,_algorithm_3_sloc0_1_0
      000214 82*01            [24]  929 	anl	c,_algorithm_3_sloc1_1_0
      000216 50 12            [24]  930 	jnc	00102$
                                    931 ;	../../sw/movable_object/src/main.c:209: pixel_x = x_min;
      000218 75*05 01         [24]  932 	mov	_pixel_x,#0x01
                                    933 ;	../../sw/movable_object/src/main.c:210: pixel_y = y_min;
      00021B E4               [12]  934 	clr	a
      00021C F5*06            [12]  935 	mov	(_pixel_x + 1),a
      00021E F5*07            [12]  936 	mov	_pixel_y,a
      000220 F5*08            [12]  937 	mov	(_pixel_y + 1),a
                                    938 ;	../../sw/movable_object/src/main.c:211: v_x_2 = 1;
      000222 75*0B 01         [24]  939 	mov	_v_x_2,#0x01
                                    940 ;	../../sw/movable_object/src/main.c:212: v_y_2 = 0;
                                    941 ;	1-genFromRTrack replaced	mov	_v_y_2,#0x00
      000225 F5*0C            [12]  942 	mov	_v_y_2,a
                                    943 ;	../../sw/movable_object/src/main.c:213: falling = 1;
      000227 75*13 01         [24]  944 	mov	_falling,#0x01
      00022A                        945 00102$:
                                    946 ;	../../sw/movable_object/src/main.c:216: if(falling == 1){
      00022A 74 01            [12]  947 	mov	a,#0x01
      00022C B5*13 04         [24]  948 	cjne	a,_falling,00106$
                                    949 ;	../../sw/movable_object/src/main.c:217: v_y_2 += 1;
      00022F 05*0C            [12]  950 	inc	_v_y_2
      000231 80 07            [24]  951 	sjmp	00107$
      000233                        952 00106$:
                                    953 ;	../../sw/movable_object/src/main.c:219: else if(rising == 1){
      000233 74 01            [12]  954 	mov	a,#0x01
      000235 B5*14 02         [24]  955 	cjne	a,_rising,00107$
                                    956 ;	../../sw/movable_object/src/main.c:220: v_y_2 -= 1;
      000238 15*0C            [12]  957 	dec	_v_y_2
      00023A                        958 00107$:
                                    959 ;	../../sw/movable_object/src/main.c:223: if(pixel_y >= y_max){
      00023A C3               [12]  960 	clr	c
      00023B E5*07            [12]  961 	mov	a,_pixel_y
      00023D 94 7C            [12]  962 	subb	a,#0x7c
      00023F E5*08            [12]  963 	mov	a,(_pixel_y + 1)
      000241 94 01            [12]  964 	subb	a,#0x01
                                    965 ;	../../sw/movable_object/src/main.c:224: v_y_2 *= -1;
      000243 40 05            [24]  966 	jc	00109$
      000245 E4               [12]  967 	clr	a
      000246 95*0C            [12]  968 	subb	a,_v_y_2
      000248 F5*0C            [12]  969 	mov	_v_y_2,a
      00024A                        970 00109$:
                                    971 ;	../../sw/movable_object/src/main.c:226: if(pixel_y <= y_min){
      00024A E5*07            [12]  972 	mov	a,_pixel_y
      00024C 45*08            [12]  973 	orl	a,(_pixel_y + 1)
      00024E 70 09            [24]  974 	jnz	00111$
                                    975 ;	../../sw/movable_object/src/main.c:227: v_y_2 *= -1;
      000250 C3               [12]  976 	clr	c
      000251 E4               [12]  977 	clr	a
      000252 95*0C            [12]  978 	subb	a,_v_y_2
      000254 F5*0C            [12]  979 	mov	_v_y_2,a
                                    980 ;	../../sw/movable_object/src/main.c:228: rising = 1;
      000256 75*14 01         [24]  981 	mov	_rising,#0x01
      000259                        982 00111$:
                                    983 ;	../../sw/movable_object/src/main.c:231: if(pixel_x >= x_max){
      000259 C3               [12]  984 	clr	c
      00025A E5*05            [12]  985 	mov	a,_pixel_x
      00025C 94 1C            [12]  986 	subb	a,#0x1c
      00025E E5*06            [12]  987 	mov	a,(_pixel_x + 1)
      000260 94 02            [12]  988 	subb	a,#0x02
      000262 40 06            [24]  989 	jc	00113$
                                    990 ;	../../sw/movable_object/src/main.c:232: pixel_x = x_min;
      000264 75*05 01         [24]  991 	mov	_pixel_x,#0x01
      000267 75*06 00         [24]  992 	mov	(_pixel_x + 1),#0x00
      00026A                        993 00113$:
                                    994 ;	../../sw/movable_object/src/main.c:235: pixel_x += v_x_2;
      00026A AE*0B            [24]  995 	mov	r6,_v_x_2
      00026C E5*0B            [12]  996 	mov	a,_v_x_2
      00026E 33               [12]  997 	rlc	a
      00026F 95 E0            [12]  998 	subb	a,acc
      000271 FF               [12]  999 	mov	r7,a
      000272 EE               [12] 1000 	mov	a,r6
      000273 25*05            [12] 1001 	add	a,_pixel_x
      000275 F5*05            [12] 1002 	mov	_pixel_x,a
      000277 EF               [12] 1003 	mov	a,r7
      000278 35*06            [12] 1004 	addc	a,(_pixel_x + 1)
      00027A F5*06            [12] 1005 	mov	(_pixel_x + 1),a
                                   1006 ;	../../sw/movable_object/src/main.c:236: pixel_y += v_y_2;
      00027C AE*0C            [24] 1007 	mov	r6,_v_y_2
      00027E E5*0C            [12] 1008 	mov	a,_v_y_2
      000280 33               [12] 1009 	rlc	a
      000281 95 E0            [12] 1010 	subb	a,acc
      000283 FF               [12] 1011 	mov	r7,a
      000284 EE               [12] 1012 	mov	a,r6
      000285 25*07            [12] 1013 	add	a,_pixel_y
      000287 F5*07            [12] 1014 	mov	_pixel_y,a
      000289 EF               [12] 1015 	mov	a,r7
      00028A 35*08            [12] 1016 	addc	a,(_pixel_y + 1)
      00028C F5*08            [12] 1017 	mov	(_pixel_y + 1),a
                                   1018 ;	../../sw/movable_object/src/main.c:238: set_xy();
      00028E 02r00r8D         [24] 1019 	ljmp	_set_xy
                                   1020 	.area CSEG    (CODE)
                                   1021 	.area CONST   (CODE)
                                   1022 	.area XINIT   (CODE)
                                   1023 	.area CABS    (ABS,CODE)
